package com.kpm.costcalculator.slicers;

import org.apache.commons.compress.utils.IOUtils;

import java.io.*;
import java.util.Properties;
import java.util.Random;

public class Slic3r implements Slicer {

    public static final String OS = System.getProperty("os.name", "linux");

    private String inputFileName;

    private String outputFileName;

    private Process process;

    private Properties properties;

    @Override
    public boolean slice(String... params) throws IOException, InterruptedException {
        File configFile = storeTempConfigFile();
        try {
            return execute(configFile);
        } finally {
            configFile.delete();
        }
    }

    @Override
    public String getError() throws IOException {
        ByteArrayOutputStream error = new ByteArrayOutputStream();
        IOUtils.copy(process.getErrorStream(), error);
        return error.toString();
    }

    @Override
    public String getOutput() throws IOException {
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        IOUtils.copy(process.getInputStream(), output);
        return output.toString();
    }

    @Override
    public Properties getProperties() throws IOException {
        if (properties == null) {
            properties = new Properties();
            properties.load(new FileReader(new File(getOriginalConfigFileName())));
        }
        return properties;
    }

    @Override
    public void setProperties(Properties properties) throws IOException {
        getProperties().putAll(properties);
    }

    @Override
    public void setInputFileName(String inputFileName) {
        this.inputFileName = inputFileName;
    }

    @Override
    public void setOutputFileName(String outputFileName) {
        this.outputFileName = outputFileName;
    }

    private String getOriginalConfigFileName() {
        return "slicers" + File.separator + "slic3r-config.ini";
    }

    private String getExecutableCommand() {
        String executable;
        System.out.println(OS);
        if (OS.toLowerCase().contains("win")) {
            executable = "slicers\\slic3r-windows\\slic3r-console.exe";
            inputFileName = "\"" + inputFileName + "\"";
            outputFileName = "\"" + outputFileName + "\"";
        } else {
            executable = "bash slicers/slic3r-linux/Slic3r --no-gui";
        }
        return executable;
    }

    private boolean execute(File configFile) throws IOException, InterruptedException {
        String command = String.format("%s --load %s -o %s %s", getExecutableCommand(), configFile.getAbsolutePath(), outputFileName, inputFileName);
        System.out.println("Executing: " + command);
        process = Runtime.getRuntime().exec(command);
        return process.waitFor() == 0;
    }

    private File storeTempConfigFile() throws IOException {
        File file = new File("temp", new Random().nextLong() + "-slicer-config.ini");
        properties.store(new FileWriter(file), "Generated by Estimate3D");
        return file;
    }

}
